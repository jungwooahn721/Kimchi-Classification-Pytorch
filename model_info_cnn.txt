
################################################################################
################################################################################

CNN(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (fc1): Linear(in_features=8192, out_features=256, bias=True)
  (dropout): Dropout(p=0.5, inplace=False)
  (fc2): Linear(in_features=256, out_features=11, bias=True)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 64, 64]             896
       BatchNorm2d-2           [-1, 32, 64, 64]              64
            Conv2d-3           [-1, 64, 64, 64]          18,496
       BatchNorm2d-4           [-1, 64, 64, 64]             128
         MaxPool2d-5           [-1, 64, 32, 32]               0
            Conv2d-6          [-1, 128, 32, 32]          73,856
       BatchNorm2d-7          [-1, 128, 32, 32]             256
         MaxPool2d-8          [-1, 128, 16, 16]               0
            Conv2d-9          [-1, 128, 16, 16]         147,584
      BatchNorm2d-10          [-1, 128, 16, 16]             256
        MaxPool2d-11            [-1, 128, 8, 8]               0
           Linear-12                  [-1, 256]       2,097,408
          Dropout-13                  [-1, 256]               0
           Linear-14                   [-1, 11]           2,827
================================================================
Total params: 2,341,771
Trainable params: 2,341,771
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.05
Forward/backward pass size (MB): 9.32
Params size (MB): 8.93
Estimated Total Size (MB): 18.30
----------------------------------------------------------------

################################################################################
################################################################################

CNN_S(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (fc1): Linear(in_features=16384, out_features=256, bias=True)
  (dropout): Dropout(p=0.5, inplace=False)
  (fc2): Linear(in_features=256, out_features=11, bias=True)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 64, 64]             896
       BatchNorm2d-2           [-1, 32, 64, 64]              64
            Conv2d-3           [-1, 64, 64, 64]          18,496
       BatchNorm2d-4           [-1, 64, 64, 64]             128
         MaxPool2d-5           [-1, 64, 32, 32]               0
            Conv2d-6           [-1, 64, 32, 32]          36,928
       BatchNorm2d-7           [-1, 64, 32, 32]             128
         MaxPool2d-8           [-1, 64, 16, 16]               0
            Linear-9                  [-1, 256]       4,194,560
          Dropout-10                  [-1, 256]               0
           Linear-11                   [-1, 11]           2,827
================================================================
Total params: 4,254,027
Trainable params: 4,254,027
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.05
Forward/backward pass size (MB): 7.63
Params size (MB): 16.23
Estimated Total Size (MB): 23.90
----------------------------------------------------------------

################################################################################
################################################################################

CNN_L(
  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv4): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv5): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn5): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv6): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (fc1): Linear(in_features=32768, out_features=256, bias=True)
  (dropout): Dropout(p=0.5, inplace=False)
  (fc2): Linear(in_features=256, out_features=11, bias=True)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 64, 64]             896
       BatchNorm2d-2           [-1, 32, 64, 64]              64
            Conv2d-3           [-1, 64, 64, 64]          18,496
       BatchNorm2d-4           [-1, 64, 64, 64]             128
         MaxPool2d-5           [-1, 64, 32, 32]               0
            Conv2d-6          [-1, 128, 32, 32]          73,856
       BatchNorm2d-7          [-1, 128, 32, 32]             256
            Conv2d-8          [-1, 256, 32, 32]         295,168
       BatchNorm2d-9          [-1, 256, 32, 32]             512
        MaxPool2d-10          [-1, 256, 16, 16]               0
           Conv2d-11          [-1, 512, 16, 16]       1,180,160
      BatchNorm2d-12          [-1, 512, 16, 16]           1,024
           Conv2d-13          [-1, 512, 16, 16]       2,359,808
      BatchNorm2d-14          [-1, 512, 16, 16]           1,024
        MaxPool2d-15            [-1, 512, 8, 8]               0
           Linear-16                  [-1, 256]       8,388,864
          Dropout-17                  [-1, 256]               0
           Linear-18                   [-1, 11]           2,827
================================================================
Total params: 12,323,083
Trainable params: 12,323,083
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.05
Forward/backward pass size (MB): 17.25
Params size (MB): 47.01
Estimated Total Size (MB): 64.31
----------------------------------------------------------------

################################################################################
################################################################################

ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (1): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer2): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer3): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=256, out_features=11, bias=True)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 64, 32, 32]           9,408
       BatchNorm2d-2           [-1, 64, 32, 32]             128
              ReLU-3           [-1, 64, 32, 32]               0
         MaxPool2d-4           [-1, 64, 16, 16]               0
            Conv2d-5           [-1, 64, 16, 16]          36,864
       BatchNorm2d-6           [-1, 64, 16, 16]             128
              ReLU-7           [-1, 64, 16, 16]               0
            Conv2d-8           [-1, 64, 16, 16]          36,864
       BatchNorm2d-9           [-1, 64, 16, 16]             128
             ReLU-10           [-1, 64, 16, 16]               0
    ResidualBlock-11           [-1, 64, 16, 16]               0
           Conv2d-12           [-1, 64, 16, 16]          36,864
      BatchNorm2d-13           [-1, 64, 16, 16]             128
             ReLU-14           [-1, 64, 16, 16]               0
           Conv2d-15           [-1, 64, 16, 16]          36,864
      BatchNorm2d-16           [-1, 64, 16, 16]             128
             ReLU-17           [-1, 64, 16, 16]               0
    ResidualBlock-18           [-1, 64, 16, 16]               0
           Conv2d-19            [-1, 128, 8, 8]           8,192
      BatchNorm2d-20            [-1, 128, 8, 8]             256
           Conv2d-21            [-1, 128, 8, 8]          73,728
      BatchNorm2d-22            [-1, 128, 8, 8]             256
             ReLU-23            [-1, 128, 8, 8]               0
           Conv2d-24            [-1, 128, 8, 8]         147,456
      BatchNorm2d-25            [-1, 128, 8, 8]             256
             ReLU-26            [-1, 128, 8, 8]               0
    ResidualBlock-27            [-1, 128, 8, 8]               0
           Conv2d-28            [-1, 128, 8, 8]         147,456
      BatchNorm2d-29            [-1, 128, 8, 8]             256
             ReLU-30            [-1, 128, 8, 8]               0
           Conv2d-31            [-1, 128, 8, 8]         147,456
      BatchNorm2d-32            [-1, 128, 8, 8]             256
             ReLU-33            [-1, 128, 8, 8]               0
    ResidualBlock-34            [-1, 128, 8, 8]               0
           Conv2d-35            [-1, 256, 4, 4]          32,768
      BatchNorm2d-36            [-1, 256, 4, 4]             512
           Conv2d-37            [-1, 256, 4, 4]         294,912
      BatchNorm2d-38            [-1, 256, 4, 4]             512
             ReLU-39            [-1, 256, 4, 4]               0
           Conv2d-40            [-1, 256, 4, 4]         589,824
      BatchNorm2d-41            [-1, 256, 4, 4]             512
             ReLU-42            [-1, 256, 4, 4]               0
    ResidualBlock-43            [-1, 256, 4, 4]               0
           Conv2d-44            [-1, 256, 4, 4]         589,824
      BatchNorm2d-45            [-1, 256, 4, 4]             512
             ReLU-46            [-1, 256, 4, 4]               0
           Conv2d-47            [-1, 256, 4, 4]         589,824
      BatchNorm2d-48            [-1, 256, 4, 4]             512
             ReLU-49            [-1, 256, 4, 4]               0
    ResidualBlock-50            [-1, 256, 4, 4]               0
AdaptiveAvgPool2d-51            [-1, 256, 1, 1]               0
           Linear-52                   [-1, 11]           2,827
================================================================
Total params: 2,785,611
Trainable params: 2,785,611
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.05
Forward/backward pass size (MB): 4.88
Params size (MB): 10.63
Estimated Total Size (MB): 15.55
----------------------------------------------------------------

################################################################################
################################################################################

ResNet34(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (1): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer2): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (3): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer3): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (3): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (4): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (5): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer4): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=512, out_features=11, bias=True)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 64, 32, 32]           9,408
       BatchNorm2d-2           [-1, 64, 32, 32]             128
              ReLU-3           [-1, 64, 32, 32]               0
         MaxPool2d-4           [-1, 64, 16, 16]               0
            Conv2d-5           [-1, 64, 16, 16]          36,864
       BatchNorm2d-6           [-1, 64, 16, 16]             128
              ReLU-7           [-1, 64, 16, 16]               0
            Conv2d-8           [-1, 64, 16, 16]          36,864
       BatchNorm2d-9           [-1, 64, 16, 16]             128
             ReLU-10           [-1, 64, 16, 16]               0
    ResidualBlock-11           [-1, 64, 16, 16]               0
           Conv2d-12           [-1, 64, 16, 16]          36,864
      BatchNorm2d-13           [-1, 64, 16, 16]             128
             ReLU-14           [-1, 64, 16, 16]               0
           Conv2d-15           [-1, 64, 16, 16]          36,864
      BatchNorm2d-16           [-1, 64, 16, 16]             128
             ReLU-17           [-1, 64, 16, 16]               0
    ResidualBlock-18           [-1, 64, 16, 16]               0
           Conv2d-19           [-1, 64, 16, 16]          36,864
      BatchNorm2d-20           [-1, 64, 16, 16]             128
             ReLU-21           [-1, 64, 16, 16]               0
           Conv2d-22           [-1, 64, 16, 16]          36,864
      BatchNorm2d-23           [-1, 64, 16, 16]             128
             ReLU-24           [-1, 64, 16, 16]               0
    ResidualBlock-25           [-1, 64, 16, 16]               0
           Conv2d-26            [-1, 128, 8, 8]           8,192
      BatchNorm2d-27            [-1, 128, 8, 8]             256
           Conv2d-28            [-1, 128, 8, 8]          73,728
      BatchNorm2d-29            [-1, 128, 8, 8]             256
             ReLU-30            [-1, 128, 8, 8]               0
           Conv2d-31            [-1, 128, 8, 8]         147,456
      BatchNorm2d-32            [-1, 128, 8, 8]             256
             ReLU-33            [-1, 128, 8, 8]               0
    ResidualBlock-34            [-1, 128, 8, 8]               0
           Conv2d-35            [-1, 128, 8, 8]         147,456
      BatchNorm2d-36            [-1, 128, 8, 8]             256
             ReLU-37            [-1, 128, 8, 8]               0
           Conv2d-38            [-1, 128, 8, 8]         147,456
      BatchNorm2d-39            [-1, 128, 8, 8]             256
             ReLU-40            [-1, 128, 8, 8]               0
    ResidualBlock-41            [-1, 128, 8, 8]               0
           Conv2d-42            [-1, 128, 8, 8]         147,456
      BatchNorm2d-43            [-1, 128, 8, 8]             256
             ReLU-44            [-1, 128, 8, 8]               0
           Conv2d-45            [-1, 128, 8, 8]         147,456
      BatchNorm2d-46            [-1, 128, 8, 8]             256
             ReLU-47            [-1, 128, 8, 8]               0
    ResidualBlock-48            [-1, 128, 8, 8]               0
           Conv2d-49            [-1, 128, 8, 8]         147,456
      BatchNorm2d-50            [-1, 128, 8, 8]             256
             ReLU-51            [-1, 128, 8, 8]               0
           Conv2d-52            [-1, 128, 8, 8]         147,456
      BatchNorm2d-53            [-1, 128, 8, 8]             256
             ReLU-54            [-1, 128, 8, 8]               0
    ResidualBlock-55            [-1, 128, 8, 8]               0
           Conv2d-56            [-1, 256, 4, 4]          32,768
      BatchNorm2d-57            [-1, 256, 4, 4]             512
           Conv2d-58            [-1, 256, 4, 4]         294,912
      BatchNorm2d-59            [-1, 256, 4, 4]             512
             ReLU-60            [-1, 256, 4, 4]               0
           Conv2d-61            [-1, 256, 4, 4]         589,824
      BatchNorm2d-62            [-1, 256, 4, 4]             512
             ReLU-63            [-1, 256, 4, 4]               0
    ResidualBlock-64            [-1, 256, 4, 4]               0
           Conv2d-65            [-1, 256, 4, 4]         589,824
      BatchNorm2d-66            [-1, 256, 4, 4]             512
             ReLU-67            [-1, 256, 4, 4]               0
           Conv2d-68            [-1, 256, 4, 4]         589,824
      BatchNorm2d-69            [-1, 256, 4, 4]             512
             ReLU-70            [-1, 256, 4, 4]               0
    ResidualBlock-71            [-1, 256, 4, 4]               0
           Conv2d-72            [-1, 256, 4, 4]         589,824
      BatchNorm2d-73            [-1, 256, 4, 4]             512
             ReLU-74            [-1, 256, 4, 4]               0
           Conv2d-75            [-1, 256, 4, 4]         589,824
      BatchNorm2d-76            [-1, 256, 4, 4]             512
             ReLU-77            [-1, 256, 4, 4]               0
    ResidualBlock-78            [-1, 256, 4, 4]               0
           Conv2d-79            [-1, 256, 4, 4]         589,824
      BatchNorm2d-80            [-1, 256, 4, 4]             512
             ReLU-81            [-1, 256, 4, 4]               0
           Conv2d-82            [-1, 256, 4, 4]         589,824
      BatchNorm2d-83            [-1, 256, 4, 4]             512
             ReLU-84            [-1, 256, 4, 4]               0
    ResidualBlock-85            [-1, 256, 4, 4]               0
           Conv2d-86            [-1, 256, 4, 4]         589,824
      BatchNorm2d-87            [-1, 256, 4, 4]             512
             ReLU-88            [-1, 256, 4, 4]               0
           Conv2d-89            [-1, 256, 4, 4]         589,824
      BatchNorm2d-90            [-1, 256, 4, 4]             512
             ReLU-91            [-1, 256, 4, 4]               0
    ResidualBlock-92            [-1, 256, 4, 4]               0
           Conv2d-93            [-1, 256, 4, 4]         589,824
      BatchNorm2d-94            [-1, 256, 4, 4]             512
             ReLU-95            [-1, 256, 4, 4]               0
           Conv2d-96            [-1, 256, 4, 4]         589,824
      BatchNorm2d-97            [-1, 256, 4, 4]             512
             ReLU-98            [-1, 256, 4, 4]               0
    ResidualBlock-99            [-1, 256, 4, 4]               0
          Conv2d-100            [-1, 512, 2, 2]         131,072
     BatchNorm2d-101            [-1, 512, 2, 2]           1,024
          Conv2d-102            [-1, 512, 2, 2]       1,179,648
     BatchNorm2d-103            [-1, 512, 2, 2]           1,024
            ReLU-104            [-1, 512, 2, 2]               0
          Conv2d-105            [-1, 512, 2, 2]       2,359,296
     BatchNorm2d-106            [-1, 512, 2, 2]           1,024
            ReLU-107            [-1, 512, 2, 2]               0
   ResidualBlock-108            [-1, 512, 2, 2]               0
          Conv2d-109            [-1, 512, 2, 2]       2,359,296
     BatchNorm2d-110            [-1, 512, 2, 2]           1,024
            ReLU-111            [-1, 512, 2, 2]               0
          Conv2d-112            [-1, 512, 2, 2]       2,359,296
     BatchNorm2d-113            [-1, 512, 2, 2]           1,024
            ReLU-114            [-1, 512, 2, 2]               0
   ResidualBlock-115            [-1, 512, 2, 2]               0
          Conv2d-116            [-1, 512, 2, 2]       2,359,296
     BatchNorm2d-117            [-1, 512, 2, 2]           1,024
            ReLU-118            [-1, 512, 2, 2]               0
          Conv2d-119            [-1, 512, 2, 2]       2,359,296
     BatchNorm2d-120            [-1, 512, 2, 2]           1,024
            ReLU-121            [-1, 512, 2, 2]               0
   ResidualBlock-122            [-1, 512, 2, 2]               0
AdaptiveAvgPool2d-123            [-1, 512, 1, 1]               0
          Linear-124                   [-1, 11]           5,643
================================================================
Total params: 21,290,315
Trainable params: 21,290,315
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.05
Forward/backward pass size (MB): 7.86
Params size (MB): 81.22
Estimated Total Size (MB): 89.13
----------------------------------------------------------------

################################################################################
################################################################################

ResNet34_346(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (1): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer2): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (3): ResidualBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (layer3): Sequential(
    (0): ResidualBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (2): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (3): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (4): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
    (5): ResidualBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential()
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=256, out_features=11, bias=True)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 64, 32, 32]           9,408
       BatchNorm2d-2           [-1, 64, 32, 32]             128
              ReLU-3           [-1, 64, 32, 32]               0
         MaxPool2d-4           [-1, 64, 16, 16]               0
            Conv2d-5           [-1, 64, 16, 16]          36,864
       BatchNorm2d-6           [-1, 64, 16, 16]             128
              ReLU-7           [-1, 64, 16, 16]               0
            Conv2d-8           [-1, 64, 16, 16]          36,864
       BatchNorm2d-9           [-1, 64, 16, 16]             128
             ReLU-10           [-1, 64, 16, 16]               0
    ResidualBlock-11           [-1, 64, 16, 16]               0
           Conv2d-12           [-1, 64, 16, 16]          36,864
      BatchNorm2d-13           [-1, 64, 16, 16]             128
             ReLU-14           [-1, 64, 16, 16]               0
           Conv2d-15           [-1, 64, 16, 16]          36,864
      BatchNorm2d-16           [-1, 64, 16, 16]             128
             ReLU-17           [-1, 64, 16, 16]               0
    ResidualBlock-18           [-1, 64, 16, 16]               0
           Conv2d-19           [-1, 64, 16, 16]          36,864
      BatchNorm2d-20           [-1, 64, 16, 16]             128
             ReLU-21           [-1, 64, 16, 16]               0
           Conv2d-22           [-1, 64, 16, 16]          36,864
      BatchNorm2d-23           [-1, 64, 16, 16]             128
             ReLU-24           [-1, 64, 16, 16]               0
    ResidualBlock-25           [-1, 64, 16, 16]               0
           Conv2d-26            [-1, 128, 8, 8]           8,192
      BatchNorm2d-27            [-1, 128, 8, 8]             256
           Conv2d-28            [-1, 128, 8, 8]          73,728
      BatchNorm2d-29            [-1, 128, 8, 8]             256
             ReLU-30            [-1, 128, 8, 8]               0
           Conv2d-31            [-1, 128, 8, 8]         147,456
      BatchNorm2d-32            [-1, 128, 8, 8]             256
             ReLU-33            [-1, 128, 8, 8]               0
    ResidualBlock-34            [-1, 128, 8, 8]               0
           Conv2d-35            [-1, 128, 8, 8]         147,456
      BatchNorm2d-36            [-1, 128, 8, 8]             256
             ReLU-37            [-1, 128, 8, 8]               0
           Conv2d-38            [-1, 128, 8, 8]         147,456
      BatchNorm2d-39            [-1, 128, 8, 8]             256
             ReLU-40            [-1, 128, 8, 8]               0
    ResidualBlock-41            [-1, 128, 8, 8]               0
           Conv2d-42            [-1, 128, 8, 8]         147,456
      BatchNorm2d-43            [-1, 128, 8, 8]             256
             ReLU-44            [-1, 128, 8, 8]               0
           Conv2d-45            [-1, 128, 8, 8]         147,456
      BatchNorm2d-46            [-1, 128, 8, 8]             256
             ReLU-47            [-1, 128, 8, 8]               0
    ResidualBlock-48            [-1, 128, 8, 8]               0
           Conv2d-49            [-1, 128, 8, 8]         147,456
      BatchNorm2d-50            [-1, 128, 8, 8]             256
             ReLU-51            [-1, 128, 8, 8]               0
           Conv2d-52            [-1, 128, 8, 8]         147,456
      BatchNorm2d-53            [-1, 128, 8, 8]             256
             ReLU-54            [-1, 128, 8, 8]               0
    ResidualBlock-55            [-1, 128, 8, 8]               0
           Conv2d-56            [-1, 256, 4, 4]          32,768
      BatchNorm2d-57            [-1, 256, 4, 4]             512
           Conv2d-58            [-1, 256, 4, 4]         294,912
      BatchNorm2d-59            [-1, 256, 4, 4]             512
             ReLU-60            [-1, 256, 4, 4]               0
           Conv2d-61            [-1, 256, 4, 4]         589,824
      BatchNorm2d-62            [-1, 256, 4, 4]             512
             ReLU-63            [-1, 256, 4, 4]               0
    ResidualBlock-64            [-1, 256, 4, 4]               0
           Conv2d-65            [-1, 256, 4, 4]         589,824
      BatchNorm2d-66            [-1, 256, 4, 4]             512
             ReLU-67            [-1, 256, 4, 4]               0
           Conv2d-68            [-1, 256, 4, 4]         589,824
      BatchNorm2d-69            [-1, 256, 4, 4]             512
             ReLU-70            [-1, 256, 4, 4]               0
    ResidualBlock-71            [-1, 256, 4, 4]               0
           Conv2d-72            [-1, 256, 4, 4]         589,824
      BatchNorm2d-73            [-1, 256, 4, 4]             512
             ReLU-74            [-1, 256, 4, 4]               0
           Conv2d-75            [-1, 256, 4, 4]         589,824
      BatchNorm2d-76            [-1, 256, 4, 4]             512
             ReLU-77            [-1, 256, 4, 4]               0
    ResidualBlock-78            [-1, 256, 4, 4]               0
           Conv2d-79            [-1, 256, 4, 4]         589,824
      BatchNorm2d-80            [-1, 256, 4, 4]             512
             ReLU-81            [-1, 256, 4, 4]               0
           Conv2d-82            [-1, 256, 4, 4]         589,824
      BatchNorm2d-83            [-1, 256, 4, 4]             512
             ReLU-84            [-1, 256, 4, 4]               0
    ResidualBlock-85            [-1, 256, 4, 4]               0
           Conv2d-86            [-1, 256, 4, 4]         589,824
      BatchNorm2d-87            [-1, 256, 4, 4]             512
             ReLU-88            [-1, 256, 4, 4]               0
           Conv2d-89            [-1, 256, 4, 4]         589,824
      BatchNorm2d-90            [-1, 256, 4, 4]             512
             ReLU-91            [-1, 256, 4, 4]               0
    ResidualBlock-92            [-1, 256, 4, 4]               0
           Conv2d-93            [-1, 256, 4, 4]         589,824
      BatchNorm2d-94            [-1, 256, 4, 4]             512
             ReLU-95            [-1, 256, 4, 4]               0
           Conv2d-96            [-1, 256, 4, 4]         589,824
      BatchNorm2d-97            [-1, 256, 4, 4]             512
             ReLU-98            [-1, 256, 4, 4]               0
    ResidualBlock-99            [-1, 256, 4, 4]               0
AdaptiveAvgPool2d-100            [-1, 256, 1, 1]               0
          Linear-101                   [-1, 11]           2,827
================================================================
Total params: 8,173,131
Trainable params: 8,173,131
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.05
Forward/backward pass size (MB): 7.50
Params size (MB): 31.18
Estimated Total Size (MB): 38.73
----------------------------------------------------------------

################################################################################
################################################################################

